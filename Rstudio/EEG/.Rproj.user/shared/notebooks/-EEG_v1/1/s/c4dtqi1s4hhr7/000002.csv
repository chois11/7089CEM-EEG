"0","# compute a CI Confidence interval "
"0",""
"0","# Var(y_hat) = E((y_hat - y)^2) = E((x(theta_hat - theta))^2) "
"0","# = x*E((theta_hat - theta)*(theta_hat - theta)^transpose)x^Transpose "
"0","# = Sigma^2*x*(X^transpose*X)^-1x^transpose"
"0",""
"0","#E is error rate"
"0","#y is original set"
"0",""
"0","number_of_length = nrow(test_X)"
"0","print(number_of_length)"
"1","[1]"
"1"," 61"
"1","
"
"0","X = as.matrix(eeg_x)"
"0","sse = norm(error_rate_dis_3 , type = ""2"")^2"
"0","sigma_two = sse/( number_of_length - 1 ) # error variance sigma^2"
"0",""
"0","cov_thetaHat = sigma_two * (solve(t(test_X) %*% test_X))"
"0","cov_thetaHat_inv = (t(X) %*% X) * (1/sigma_two) # inverse of cov_thetaHat"
"0","det_cov_thetaHat = det(cov_thetaHat) # determinent of cov_thetaHat"
"0",""
"0","y_hat = test_X %*% theta_hat_3_train"
"0",""
"0",""
"0","###########################################################################"
"0",""
"0",""
"0","Xtes = as.matrix(test_X)"
"0","test_X = Xtes"
"0",""
"0","number_of_parameters = 4 # model three"
"0","# # y_hat = X %*% theta_hat_3 # error rate"
"0",""
"0","var_y_hat = matrix(0 , number_of_length , 1)"
"0",""
"0","for( i in 1:number_of_length) {"
"0","  X_i = matrix(test_X[i,] , 1 , number_of_parameters ) # X[i,] creates a vector. Convert it to matrix"
"0","  var_y_hat[i, ] = X_i %*% cov_thetaHat %*% t(X_i)"
"0","}"
"0",""
"0","trans_y_hat = t(y_hat) "
"0",""
"0","CI = 2 * sqrt(var_y_hat) # Confidence interval"
"0","plot(trans_y_hat, test_X)"
"2","Error in xy.coords(x, y, xlabel, ylabel, log) : 
  'x' and 'y' lengths differ
"
